<?php

namespace SensioLabs\JobBoardBundle\Repository;

use Symfony\Component\Security\Core\User\UserInterface;
use Doctrine\ORM\EntityRepository;
use SensioLabs\JobBoardBundle\Entity\Job;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends EntityRepository
{
    /**
     * @param  int         $page
     * @param  string|null $countryCode
     * @param  string|null $contractType
     * @param  int         $maxResults
     * @return array
     */
    public function getJobs($page = 1, $countryCode = null, $contractType = null, $maxResults = 10)
    {
        if ((int) $page === 0) {
            return;
        }

        $offset = ($page - 1) * $maxResults;

        $qb = $this->createQueryBuilder('a')
            ->where('a.status = :status')
            ->setParameter('status', Job::STATUS_PUBLISHED)
            ->andWhere('a.visibleFrom <= :current_date')
            ->andWhere('a.visibleTo >= :current_date')
            ->setParameter('current_date', new \DateTime())
            ->addOrderBy('a.createdAt', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
        ;

        $qb = $this->setFiltersQB($qb, $countryCode, $contractType);

        return $qb->getQuery()->getResult();
    }

    public function getFeed($countryCode = null, $contractType = null)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.status = :status')
            ->setParameter('status', Job::STATUS_PUBLISHED)
            ->andWhere('a.visibleFrom <= :current_date')
            ->andWhere('a.visibleTo >= :current_date')
            ->setParameter('current_date', new \DateTime())
        ;
        $qb = $this->setFiltersQB($qb, $countryCode, $contractType);

        return $qb->getQuery()->getResult();
    }

    public function setFiltersQB($qb, $countryCode = null, $contractType = null)
    {
        if ($countryCode) {
            $qb->andWhere('l.country = :country_code')
               ->setParameter('country_code', $countryCode)
               ->innerJoin('a.location', 'l')
            ;
        }

        if ($contractType) {
            $qb->andWhere('a.contractType = :contract_type')
                ->setParameter('contract_type', $contractType)
            ;
        }

        return $qb;
    }

    /**
     * @param  UserInterface       $user
     * @return \Doctrine\ORM\Query
     */
    public function getByUserQuery(UserInterface $user)
    {
        $qb = $this->createQueryBuilder('j')
            ->where('j.user = :user')
            ->setParameter('user', $user)
            ->addOrderBy('j.createdAt', 'DESC')
        ;

        return $qb->getQuery();
    }

    /**
     * @return array
     */
    public function getCountriesWithJob($contractType = null)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('count(l) as number, l.country')
            ->where('a.status = :status')
            ->setParameter('status', Job::STATUS_PUBLISHED)
            ->andWhere('a.visibleFrom <= :current_date')
            ->andWhere('a.visibleTo >= :current_date')
            ->setParameter('current_date', new \DateTime())
        ;

        $qb = $this->setFiltersQB($qb, null, $contractType);
        $qb->innerJoin('a.location', 'l')
            ->groupBy('l.country')
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @return array
     */
    public function getContractTypesWithJob($country = null)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('count(a) as number, a.contractType')
            ->where('a.status = :status')
            ->setParameter('status', Job::STATUS_PUBLISHED)
            ->andWhere('a.visibleFrom <= :current_date')
            ->andWhere('a.visibleTo >= :current_date')
            ->setParameter('current_date', new \DateTime())
        ;

        $qb = $this->setFiltersQB($qb, $country);
        $qb->groupBy('a.contractType')
        ;

        return $qb->getQuery()->getResult();
    }

    public function getRandomJob()
    {
        $em = $this->getEntityManager();
        $min = $em->createQuery('SELECT MIN(q.id) FROM SensioLabsJobBoardBundle:Job q')->getSingleScalarResult();
        $max = $em->createQuery('SELECT MAX(q.id) FROM SensioLabsJobBoardBundle:Job q')->getSingleScalarResult();

        $query = $em->createQuery('SELECT q FROM SensioLabsJobBoardBundle:Job q WHERE q.id >= :rand ORDER BY q.id ASC')
            ->setParameter('rand', rand($min, $max))
            ->setMaxResults(1)
            ->getSingleResult()
        ;

        return $query;
    }

    public function hardDelete()
    {
        $qb = $this->createQueryBuilder('j')
            ->delete()
            ->where('j.deletedAt < :current_date')
            ->andWhere('j.status = :status')
            ->setParameter('current_date', new \Datetime('-20 day'))
            ->setParameter('status', Job::STATUS_DELETED)
        ;

        return $qb->getQuery()->getResult();
    }

    public function createSearchIndexQueryBuilder()
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.status = :status')
            ->setParameter('status', Job::STATUS_PUBLISHED)
            ->andWhere('a.visibleFrom <= :current_date')
            ->andWhere('a.visibleTo >= :current_date')
            ->setParameter('current_date', new \DateTime())
        ;

        return $qb;
    }
}
