<?php

namespace SensioLabs\JobBoardBundle\Repository;

use Doctrine\ORM\EntityRepository;
use SensioLabs\JobBoardBundle\Entity\Job;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends EntityRepository
{
    /**
     * @param int $page
     * @param string|null $countryCode
     * @param string|null $contractType
     * @param int $maxResults
     * @return array
     */
    public function getJobs($page = 1, $countryCode = null, $contractType = null, $maxResults = 10)
    {
        if ((int)$page === 0) {
            return;
        }

        $offset = ($page - 1) * $maxResults;

        $qb = $this->createQueryBuilder('a')
            ->where('a.status = :status')
            ->setParameter('status', Job::STATUS_SAVED)
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
        ;

        if ($countryCode) {
            $qb->andWhere('a.country = :country_code')
               ->setParameter('country_code', $countryCode)
            ;
        }

        if ($contractType) {
            $qb->andWhere('a.contractType = :contract_type')
               ->setParameter('contract_type', $contractType)
            ;
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @return array
     */
    public function getCountriesWithJob()
    {
        $qb = $this->createQueryBuilder('c')
            ->select('count(c) as number, c.country')
            ->where('c.status = :status')
            ->setParameter('status', Job::STATUS_SAVED)
            ->groupBy('c.country')
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @return array
     */
    public function getContractTypesWithJob()
    {
        $qb = $this->createQueryBuilder('c')
            ->select('count(c) as number, c.contractType')
            ->where('c.status = :status')
            ->setParameter('status', Job::STATUS_SAVED)
            ->groupBy('c.contractType')
        ;

        return $qb->getQuery()->getResult();
    }
}
